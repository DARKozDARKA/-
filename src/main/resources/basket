package discord;

import discord4j.common.util.Snowflake;
import discord4j.core.DiscordClient;
import discord4j.core.GatewayDiscordClient;
import discord4j.core.event.domain.interaction.*;
import discord4j.core.event.domain.lifecycle.ReadyEvent;
import discord4j.core.event.domain.message.MessageCreateEvent;
import discord4j.core.object.command.ApplicationCommandOption;
import discord4j.core.object.component.*;
import discord4j.core.object.entity.Guild;
import discord4j.core.object.entity.Message;
import discord4j.core.object.entity.channel.GuildChannel;
import discord4j.core.object.entity.channel.MessageChannel;
import discord4j.core.spec.EmbedCreateSpec;
import discord4j.discordjson.json.ApplicationCommandOptionData;
import discord4j.discordjson.json.ApplicationCommandRequest;
import discord4j.discordjson.json.ComponentData;
import discord4j.discordjson.json.MessageCreateRequest;
import reactor.core.publisher.Mono;

import java.time.Duration;
import java.util.concurrent.TimeoutException;

public class App {
    public static void main(final String[] args) {
        final String token = args[0];
        final DiscordClient client = DiscordClient.create(token);
        final GatewayDiscordClient gateway = client.login().block();
        final long appId = 935566371599826995L;
        final long guildId = 448934652992946176L;
        final long botChannelId = 935576925773127710L;
        final long adminId = 383277523561086979L;
        final String helpCommandName = "question";

        gateway.on(ReadyEvent.class).subscribe(event -> {

            final Guild guild = gateway.getGuildById(Snowflake.of(guildId)).block();
            final GuildChannel guildChannel = guild.getChannelById(Snowflake.of(botChannelId)).block();

            ApplicationCommandRequest greetCmdRequest = ApplicationCommandRequest.builder()
                    .name(helpCommandName)
                    .description("Ask a question")
                    .build();

            gateway.getRestClient().getApplicationService()
                            .createGuildApplicationCommand(appId, guildId, greetCmdRequest)
                    .subscribe();


            String componentId = "1";
            MessageChannel messageChannel = (MessageChannel) guildChannel;

            SelectMenu select = SelectMenu.of(componentId,
                    SelectMenu.Option.of("label1", "value1"),
                    SelectMenu.Option.of("label2", "value2"),
                    SelectMenu.Option.of("label3", "value3")
            );

            Mono<Void> tempSelectListener = gateway.on(SelectMenuInteractionEvent.class, smEvent -> {
                        if(smEvent.getCustomId().equals(componentId)) {
                            String values = smEvent
                                    .getValues()
                                    .toString();
                            smEvent
                                    .getInteraction()
                                    .getMessage().get().edit().withComponents(ActionRow.of(select.disabled())).block();
                            return smEvent.reply("Good!"+values).withEphemeral(true);
                        } else {
                            return Mono.empty();
                        }
                    }).timeout(Duration.ofSeconds(10))
                    .onErrorResume(TimeoutException.class, ignore -> Mono.empty())
                    .then();

            System.out.println("!!!");
            LayoutComponent layoutComponent = ActionRow.of(select);
            Mono<Message> messageMono = messageChannel.createMessage("Test!").withComponents(layoutComponent);
            messageMono.then(tempSelectListener).block();
        });
        gateway.on(ButtonInteractionEvent.class).subscribe(event -> {

        });

        gateway.on(ApplicationCommandInteractionEvent.class, event -> {
            if(event.getCommandName().equals(helpCommandName)) {
                long authorId = event.getInteraction().getMember().get().getId().asLong();
                System.out.println(event.getInteraction().getMember().get().getTag());
                if(authorId == adminId) {
                    return event.reply("Pong!!");
                }

            }
            return null;
        }).subscribe();

        gateway.on(MessageCreateEvent.class).subscribe(event -> {
            if(event.getGuild().block() != null) {
                final Message message = event.getMessage();
                if ("!ping".equals(message.getContent())) {
                    /*final MessageChannel channel = message.getChannel().block();
                    ActionComponent component = Button.primary(null, "Hi!");
                    LayoutComponent layoutComponent = ActionRow.of(component);
                    channel.createMessage("Pong!").withComponents(layoutComponent).block();*/

                }
            }

        });



        gateway.onDisconnect().block();
    }
}
/*(SelectMenu)(selectMenuInteractionEvent
                                    .getInteraction()
                                    .getMessage()
                                    .get()
                                    .getComponents()
                                    .get(0)
                                    .getChildren()
                                    .get(0)
                                    .getType()).disabled();*/

---
text: efef
childText:
  - text:
    - en: question1
    - ru: вопрос1
    childText:
      - text:
        - en: question2
        - ru: вопрос2
        childText:
          - text:
            - en: question3
            - ru: вопрос3
            childText:
              - text:
                - en: question4
                - ru: вопрос4
                childText:
                  - text:
                    - en: answer1
                    - ru: ответ1
                    childText:
              - text:
                - en: answer2
                - ru: ответ2
                childText:
                  - text:
                    - en: answer3
                    - ru: ответ3
                    childText:
          - text:
            - en: question6
            - ru: вопрос6
            childText:
              - text:
                - en: answer4
                - ru: ответ4
                childText:
      - text:
          - en: question7
          - ru: вопрос7
        childText:
          - text:
            - en: answer5
            - ru: ответ5
            childText: